---
layout: post
title:  "[Jekyll Blog] 마크다운(Markdown) 사용법 및 예제"
subtitle: "마크다운(Markdown)"
categories: envops
tags: envops blog github pages jekyll markdown  
comments: true
---


## 개요
> `마크다운(Markdown)` 문법 중 당장 글쓰기에 필요한 가장 많이 사용하는 것 부터 단계적으로 배워봅니다.  
  
- 목차
	- [Markdown이란?](#) 
	- [Markdown 에디터 뭘 쓸까?](#)
	- [Markdown의 문법1(반드시 알아야 하는)](#)
	- [Markdown의 문법2(부가기능)](#)
	- [실전연습](#)
	- [이미지 관리 및 업로드](#)
	- [작성 중 소소한 Tip 그리고 문제 해결방법](#)
  
  
## Markdown이란?  
---
[`Markdown`](http://kirkstrobeck.github.io/whatismarkdown.com/)은 문서 작성을 위해 태그(Tag) 형태로 작성하는 문법이다. 
> __What is Markdown? (출처-위키백과)__  
> 마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰인다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능하다.  

* __익숙한 Word나 한글(HWP)로 작성하면 되지 않나요?__  
가능하다. 하지만 WEB 위에서 글을 쓰고 싶다면 이 둘은 적합한 도구가 아니다. 세상의 거의 모든 컨텐츠가 WEB 기반으로 생산되고 소비되기 때문에 이 문제는 중요하다. 물론 이런 편집기로도 Save As(다른 이름으로 저장) 기능을 통해 HTML 확장자로 변환 후 WEB에 올릴수도 있지만 소스코드의 양을 보면 경악을 금치 못하게 된다. 더욱이 스타일, 표 등이 온전하게 변환되지 않아 전용 편집기에서 보는 것과 동일한 모양으로 보기 힘들다.

* __WEB 문서라면 HTML이나 WEB 프로그래밍 언어를 써도 되잖아요.__   
가능하다. 하지만 생산성(작성 속도 및 편리성)에 큰 차이가 있다. 더욱이 WEB언어를 모르는 사람이라면 익숙하지 않은 프로그래밍의 문법을 다시 배우고 능숙해지는데 꽤 큰 노력과 긴 시간을 필요로 하게 될 것이다.

* __그리고 또 써야하는 이유가 있나요?__   
  - Text로 저장한 후 HTML으로의 변환이 가능하다. 변환을 지원하는 도구나 Eco(생태계)가 매우 많다.
  - Text로 저장하기 때문에 Git을 통한 버전관리가 가능하고, 용량이 적어 보관이 용이하다.  
  - 배우기가 정말 쉽고 직관적이다. 

* __안 좋은 점은?__  
유일하게 안 좋은 점이 하나 있는데 표준이 없다. 핵심 문법을 제외하고는 에디터 도구에 따라 결과물이 약간 달라질 수 있다.    
  
## Markdown의 반드시 알아야 하는 문법  
---
글을 작성할 때 반드시 한번 이상 사용하는 중요한 문법들을 간추려 글을 쓰는 순서에 맞게 기술하였다. 처음 접하는 분들은 이 부분만 숙지하고 바로 예제를 작성하신 후, 궁금한 점이 있을 때 다음 파트인 [Markdown의 기타 문법](#)으로 넘어가시기 바란다.

---
*  __[1단계] `헤더(Header)` : 제목, 문단별 제목을 쓰고 싶을 때__  
글의 구조(개요) 및 큰 틀을 잡을 때 사용한다.  
  
```
# 제목 1단계
## 제목 2단계  
### 제목 3단계
#### 제목 4단계
##### 제목 5단계
###### 제목 6단계 
```
  
# 제목 1단계
## 제목 2단계  
### 제목 3단계
#### 제목 4단계
##### 제목 5단계
###### 제목 6단계 
  
---
*  __[2단계] `수평선` : 내용을 구분하고 싶을 때__      
  
```
---
```
  
---
  
---
*  __[3단계] `엔터키(줄바꿈, 개행)` : 라인을 바꾸고 싶을 때__  
  
```
띄어쓰기 2번을 입력하면.(from)  (to)<!-- from과 to 사이에 스페이스 2번 입력-->
줄이 바뀐다.
```
  
띄어쓰기 2번을 입력하면.(from)  (to)
줄이 바뀐다.
    
---
*  __[4단계] `목록(List)` : 요소를 나열할 때__  
  
```
1. 순서있음
  1. 첫번째
  1. 두번째
  1. 세번째  
1. 순서목록2
1. 순서목록3
  
+ 순서없음
    - 홍길동
      * 중대장
        + 프로실망러
```
  
1. 순서있음
  1. 첫번째
  1. 두번째
  1. 세번째  
1. 순서목록2
1. 순서목록3
  
+ 순서없음
    - 홍길동
      * 중대장
        + 프로실망러
  
---
*  __[5단계] `강조` : 문장 내 강조하고 싶은 단어를 눈에 띄게__  
  
```
__볼드(진하게)__  
_이탤릭체(기울여서)_    
~~취소선~~  
<u>밑줄</u>  
```
  
__볼드(진하게)__  
_이탤릭체(기울여서)_    
~~취소선~~  
<u>밑줄</u>  
  

---
*  __[6단계] `인용구` : 인용할 경우 또는 분위기 전환시에도 사용(중복 형태 가능)__  
  
```
> 위키백과?
>> 중대장 드립 검색
>>> "오늘 중대장은 너희에게 실망했다"
```
  
> 위키백과?
>> 중대장 드립 검색
>>> "오늘 중대장은 너희에게 실망했다"  
  
---
*  __[7단계] `링크(Link)` : 클릭하면 다른 페이지, 다른 부분으로 이동 가능__  
  
```
유형1(설명어를 클릭하면 URL로 이동) : [TheoryDB 블로그](https://theorydb.github.io "마우스를 올려놓으면 말풍선이 나옵니다.")  
유형2(URL 보여주고 자동연결) : <https://theorydb.github.io>  
유형3(동일파일 내 문단 이동) : [동일파일 내 문단 이동](#markdown의-반드시-알아야-하는-문법)  
>__매칭방법__ :   
>제목(header)를 복사 붙여넣기 후,  
>1)`특수문자`제거 
>2)스페이스를 갯수만큼 `-`로 변경 
>3) 대문자->소문자로 변경  
>예) "#Markdown!  장점" -> "#markdown--장점"  

유형4(상대경로로 서버 내 파일이동)이라는 기능도 있지만 쓸 일이 거의 없어 제외합니다.  
```
  
유형1(설명어를 클릭하면 URL로 이동) : [TheoryDB 블로그](https://theorydb.github.io "마우스를 올려놓으면 말풍선이 나옵니다.")  
유형2(URL 보여주고 자동연결) : <https://theorydb.github.io>  
유형3(동일파일 내 문단 이동) : [동일파일 내 문단 이동](#markdown의-반드시-알아야-하는-문법)  
>__매칭방법__ :   
>제목(header)를 복사 붙여넣기 후,  
>1)`특수문자`제거 
>2)스페이스를 갯수만큼 `-`로 변경 
>3) 대문자->소문자로 변경  
>예) "#Markdown!  장점" -> "#markdown--장점"  

유형4(상대경로로 서버 내 파일이동)이라는 기능도 있지만 쓸 일이 거의 없어 제외합니다.  
  
---
*  __[8단계] `이미지(Image)` : 이미지 보여주기__  
  
```
유형1(이미지 삽입) :     
![이미지](https://theorydb.github.io/assets/img/review/2019-06-20-review-book-self-study-java-3.jpg "스트림개념도")
  
유형2(사이즈를 조절하고 싶은 경우 HTML 태그로 처리) :   
<img src="https://user-images.githubusercontent.com/25575933/60751049-0c0fbe00-9feb-11e9-86e6-6fd6d902d33b.jpg" width="200" height="300"> 

유형3(이미지 상대경로로 삽입 후, 링크 걸기)
[![이미지](img/think/2019-06-25-think-future-ai-1.png)](https://theorydb.github.io/think/2019/06/25/think-future-ai/)
```
  
유형1(이미지 삽입) :  
![이미지](https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png "인공지능")
  
유형2(사이즈를 조절하고 싶은 경우 HTML 태그로 처리) :   
<img src="https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png" width="300" height="200"> 

유형3(이미지 삽입 후, 링크 걸기)
[![이미지](https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png)](https://theorydb.github.io/think/2019/06/25/think-future-ai/)
  
여기까지 글을 쓸 때 매번 쓰이는 Markdown의 문법을 알아보았다. 

## Markdown의 기타 문법  
---



## 실전연습  
---
이제 Markdown의 거의 모든 문법을 알아보았다. `백문이 불여일타`이므로 반드시 직접 마크다운 문서를 작성해보자.

1. 연습문제1 : 위의 문법 실습을 그대로 타이핑하는 문서 만들기  
2. 연습문제2 : 이 포스팅과 동일한 문서 만들기  
최대한 정답 없이 위에서 배운 문법을 이용하여 본 포스팅과 동일하게 만들어보자.  
성공한다면 앞으로 그 어떤 마크다운 문서 작성도 두렵지 않을 것이다.   

> __`연습문제2 정답`__   
> 1. [`필자 블로그 Github`](https://github.com/theorydb/theorydb.github.io)에 접속  
> 2. 우측의 `Clone or download`(녹색버튼) 클릭  
> 3. `/theorydb.github.io-master/_posts/` 폴더 이동  
> 4. `2019-07-22-envops-blog-how-to-use-md.markdown`를 확인. 

## Markdown 에디터 어떤걸 쓸까?  
---
윈도우 메모장으로 써도 된다. 하지만 그따위 것을 쓰려고 이 포스팅을 보시진 않을 것이다.

* 선정기준
  - 다양한 표현 기능을 지원하는가?(논문 수준의 수식, 다양한 Icon 이미지, Code Block, UML 다이어그램,.. 등)
  - 저장(Publish)을 어디에? (Git, 구글드라이브, 블로거, 드랍박스, 워드브레스, 텀블러, 내 PC, 개발서버, .. 등) 
  - 온라인(인터넷)이 차단(비행기, 네트워크 장애, 비용 문제 등)되어도 사용할 수 있는가?
  - 얼마면 되는데?




이로써 Tipue Search 오픈소스를 활용하여 블로그에 멋진 검색 기능을 구축하였다. 다음 기능으로는 Jekyll 기반 블로그의 `Disqus` 댓글 기능 추가에 대하여 포스팅 할 예정임을 미리알려드린다.  


> Jekyll 기반의 깃헙 페이지 블로그 구축 포스팅은 계속될 예정입니다. 처음 구축하는 방법부터 올리려고 했는데 시간 부족으로 계속 미루고 있네요^^; 포스팅 순서가 어긋나더라도 차후 개인적으로 구현하려는 목표가 모두 완성되는대로 `구축을 위한 설계도` 개념의 포스팅에서 통합 정리 및 링크부여를 통해 가급적 편하게 보시며 구축하실 수 있도록 노력하겠습니다. 읽어주셔서 감사합니다. 